{"version":3,"sources":["components/counter.jsx","components/counters.jsx","components/navigation.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","Fragment","className","this","getBadgeClasses","props","counter","value","onClick","onIncrement","onDelete","id","classes","Component","counters","onReset","repeat","map","key","Navbar","totalCounters","href","App","state","handleDelete","counterid","setState","filter","C","handleReset","c","handleIncrement","index","indexOf","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOA4BeA,E,iLAtBD,IAAD,OAGL,OACA,kBAAC,IAAMC,SAAP,KACI,0BAAMC,UAAWC,KAAKC,mBAAoBD,KAAKE,MAAMC,QAAQC,OAC7D,4BAAQC,QAAS,kBAAI,EAAKH,MAAMI,YAAY,EAAKJ,MAAMC,UAAUJ,UAAU,4BAA3E,cACA,4BAAQA,UAAU,4BAA4BM,QAAS,kBAAI,EAAKH,MAAMK,SAAS,EAAKL,MAAMC,QAAQK,MAAlG,YAHJ,IAG6H,gC,wCAS7H,IAAIC,EAAQ,mBAEZ,OADAA,GAAqC,IAA3BT,KAAKE,MAAMC,QAAQC,MAAW,UAAW,c,GArBrCM,aCmBPC,E,iLAdD,IAAD,EAEyCX,KAAKE,MAA5CI,EAFF,EAEEA,YAAYM,EAFd,EAEcA,QAAQL,EAFtB,EAEsBA,SAAUM,EAFhC,EAEgCA,OACrC,OACI,6BACI,4BAAQd,UAAU,6BAA6BM,QAASO,GAAxD,SADJ,IACoF,6BAClFC,EAAOC,KAAI,SAAAX,GAAO,OACf,kBAAC,EAAD,CAASY,IAAKZ,EAAQK,GAAKD,SAAUA,EAAUJ,QAASA,EAASG,YAAaA,Y,GAXxEI,aCURM,EAVF,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,cACX,OAAO,kBAAC,IAAMnB,SAAP,KACC,yBAAKC,UAAU,gCACzB,uBAAGA,UAAU,eAAemB,KAAK,KAAjC,UACW,0BAAMnB,UAAU,oCAAhB,IAAqDkB,OCqCnDE,E,2MAtCbC,MAAQ,CACNP,OAAQ,CACJ,CAACL,GAAG,EAAEJ,MAAM,GAAG,CAACI,GAAG,EAAEJ,MAAM,GAAG,CAACI,GAAG,EAAEJ,MAAM,GAAG,CAACI,GAAG,EAAEJ,MAAM,K,EAGhEiB,aAAa,SAACC,GAEP,EAAKC,UAAS,SAAAH,GAAK,MAAK,CACpBP,OAAQO,EAAMP,OAAOW,QAAO,SAAAC,GAAC,OAAIA,EAAEjB,KAAOc,U,EAIlDI,YAAY,WACT,IAAMf,EAAU,EAAKS,MAAMP,OAAOC,KAAI,SAAAa,GACtC,OAD2CA,EAAEvB,MAAM,EAC5CuB,KACP,EAAKJ,SAAS,CAAEZ,c,EAGvBiB,gBAAgB,SAACzB,GACb,IAAMU,EAAO,YAAK,EAAKO,MAAMP,QACvBgB,EAAOhB,EAAOiB,QAAQ3B,GAC5BU,EAAOgB,GAAP,eAAkB1B,GAClBU,EAAOgB,GAAOzB,QACd,EAAKmB,SAAS,CAACV,Y,wEAIf,OAAO,kBAAC,IAAMf,SAAP,KACL,kBAAC,EAAD,CAAQmB,cAAejB,KAAKoB,MAAMP,OAAOW,QAAO,SAAAG,GAAC,OAAEA,EAAEvB,MAAQ,KAAG2B,SAChE,0BAAMhC,UAAU,cAEf,kBAAC,EAAD,CAAUc,OAAQb,KAAKoB,MAAMP,OAAQD,QAASZ,KAAK0B,YAAapB,YAAaN,KAAK4B,gBAAiBrB,SAAUP,KAAKqB,oB,GAhCvGX,aCOEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b95f0165.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Counter extends Component {\r\n\r\n   \r\n\r\n    render() { \r\n       \r\n\r\n        return (\r\n        <React.Fragment>\r\n            <span className={this.getBadgeClasses()}>{this.props.counter.value}</span>\r\n            <button onClick={()=>this.props.onIncrement(this.props.counter)} className=\"btn btn-secondary btn-sm\"> Increment</button>\r\n            <button className='btn btn-danger btn-sm m-2' onClick={()=>this.props.onDelete(this.props.counter.id)}> Delete </button> <br/>\r\n            \r\n            </React.Fragment>)\r\n    }\r\n\r\n  \r\n\r\n    getBadgeClasses(){\r\n\r\n        let classes='badge m-2 badge-';\r\n        classes+= this.props.counter.value===0? 'warning': 'primary'\r\n        return classes\r\n    }\r\n}\r\n \r\nexport default Counter  ;","import React, { Component } from 'react';\r\nimport Counter from './counter';\r\n\r\nclass counters extends Component {\r\n    \r\n\r\n     \r\n    render() { \r\n\r\n        const {onIncrement,onReset,onDelete, repeat}= this.props\r\n        return (  \r\n            <div>\r\n                <button className='btn btn-primary btn-sm m-2' onClick={onReset}>Reset</button> <br/>\r\n             {repeat.map(counter=>\r\n                 <Counter key={counter.id}  onDelete={onDelete} counter={counter} onIncrement={onIncrement} /> )\r\n             }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default counters;","import React, { Component } from 'react';\r\n\r\n\r\nconst Navbar=({totalCounters})=>{\r\n    return(<React.Fragment>\r\n            <nav className=\"navbar navbar-light bg-light\">\r\n  <a className=\"navbar-brand\" href='#'>\r\n      Navbar <span className='badge badge-pill badge-secondary'> {totalCounters}</span>\r\n\r\n       </a>\r\n</nav>\r\n    </React.Fragment>)}\r\n \r\nexport default Navbar;\r\n\r\n\r\n","\nimport React, { Component } from 'react';\nimport Counters from './components/counters'\nimport NavBar from './components/navigation'\n\nclass App extends Component {\n  state = { \n    repeat: [\n        {id:1,value:0},{id:2,value:0},{id:3,value:0},{id:4,value:0}  ]\n }\n\n handleDelete=(counterid)=>{\n    \n        this.setState(state => ({\n            repeat: state.repeat.filter(C => C.id !== counterid )\n        }));\n    }\n\n    handleReset=()=>{\n       const counters= this.state.repeat.map(c=> {c.value=0\n       return c })\n       this.setState({ counters})\n}\n\nhandleIncrement=(counter)=>{\n    const repeat= [...this.state.repeat]\n    const index= repeat.indexOf(counter);\n    repeat[index]={...counter};\n    repeat[index].value++;\n    this.setState({repeat})\n\n}\n  render() { \n    return <React.Fragment>\n      <NavBar totalCounters={this.state.repeat.filter(c=>c.value > 0).length} />\n      <main className='container'></main>\n\n       <Counters repeat={this.state.repeat} onReset={this.handleReset} onIncrement={this.handleIncrement} onDelete={this.handleDelete}/>\n       \n    </React.Fragment>;\n  }\n}\n \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport  'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}